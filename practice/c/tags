!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	sort/Makefile	/^CC=gcc$/;"	m
CFLAGS	sort/Makefile	/^CFLAGS=-g -Wall$/;"	m
DataCompareFunc	sort/sort_comm.h	/^typedef int (*DataCompareFunc)(void* ctx, void* data);$/;"	t
FALSE	common/typedef.h	20;"	d
FALSE	data_struct/single_link_list/sll_node.h	16;"	d
INCL	sort/Makefile	/^INCL=..\/common$/;"	m
INCLS	sort/Makefile	/^INCLS= -I $(INCL)$/;"	m
NODE	data_struct/single_link_list/sll_node.h	/^typedef struct NODE{$/;"	s
Node	data_struct/single_link_list/sll_node.h	/^}Node;$/;"	t	typeref:struct:NODE
OBJS	sort/Makefile	/^OBJS=sort.o sort_comm.o test_sort.o$/;"	m
RET_ERROR	common/typedef.h	/^    RET_ERROR,$/;"	e	enum:ret_t
RET_FAIL	common/typedef.h	/^    RET_FAIL,$/;"	e	enum:ret_t
RET_INVALID_PARAMS	common/typedef.h	/^    RET_INVALID_PARAMS,$/;"	e	enum:ret_t
RET_MAX	common/typedef.h	/^    RET_MAX$/;"	e	enum:ret_t
RET_OK	common/typedef.h	/^    RET_OK,$/;"	e	enum:ret_t
S1	other/struct_size.c	/^struct S1{$/;"	s	file:
S3	other/struct_size.c	/^struct S3{$/;"	s	file:
SAFE_FREE	common/common.h	14;"	d
SortFunc	sort/sort.h	/^typedef ret_e (*SortFunc)(void** array, size_t nr, DataCompareFunc cmp);$/;"	t
StEmpty	other/struct_size.c	/^}StEmpty;$/;"	t	typeref:struct:st_empty	file:
StWithArray	other/struct_size.c	/^}StWithArray;$/;"	t	typeref:struct:st_with_array	file:
StWithBit	other/struct_size.c	/^}StWithBit;$/;"	t	typeref:struct:st_with_bit	file:
StWithBit2	other/struct_size.c	/^}StWithBit2;$/;"	t	typeref:struct:st_with_bit2	file:
StWithBit3	other/struct_size.c	/^}StWithBit3;$/;"	t	typeref:struct:st_with_bit3	file:
TRUE	common/typedef.h	19;"	d
TRUE	data_struct/single_link_list/sll_node.h	15;"	d
_COMMON_H	common/common.h	9;"	d
_DEBUG_H	common/debug.h	9;"	d
_LOCKER_H	data_struct/double_link_list/locker.h	10;"	d
_LOCKER_PTHREAD_H	data_struct/double_link_list/locker_pthread.h	10;"	d
_SLL_NODE_H	data_struct/single_link_list/sll_node.h	9;"	d
_SORT_COMM_H	sort/sort_comm.h	10;"	d
_SORT_H	sort/sort.h	10;"	d
_TYPEDEF_H	common/typedef.h	10;"	d
a	other/struct_size.c	/^    char a;$/;"	m	struct:s3	file:
a	other/struct_size.c	/^    char a;$/;"	m	struct:s4	file:
a	other/struct_size.c	/^    char a[8];$/;"	m	struct:s1	file:
a	other/struct_size.c	/^    char a[8];$/;"	m	struct:st_with_array	file:
b	other/struct_size.c	/^    char b;$/;"	m	struct:st_with_bit	file:
b	other/struct_size.c	/^    int b;$/;"	m	struct:st_with_array	file:
bss_array	wheres_my_data/bss.c	/^int bss_array[1024 * 1024];$/;"	v
bubble_sort	sort/sort.c	/^ret_e bubble_sort(void **array, size_t nr, DataCompareFunc cmp)$/;"	f
c	other/struct_size.c	/^    char c;$/;"	m	struct:S1	file:
c	other/struct_size.c	/^    char c;$/;"	m	struct:st_with_bit	file:
c1	other/struct_size.c	/^    char c1;$/;"	m	struct:S3	file:
c2	other/struct_size.c	/^    char c2;$/;"	m	struct:S3	file:
channel_info_s	other/point_arr.c	/^typedef struct channel_info_s$/;"	s	file:
channel_info_t	other/point_arr.c	/^}channel_info_t;$/;"	t	typeref:struct:channel_info_s	file:
create_int_array	sort/test_sort.c	/^void **create_int_array(int n)$/;"	f
d	other/struct_size.c	/^    double d;$/;"	m	struct:s2	file:
data_array	wheres_my_data/data.c	/^int data_array[1024 * 1024] = {1};$/;"	v
destory	data_struct/double_link_list/locker.h	/^    ret_e (*destory)(locker_s *thiz);    \/**< 销毁函数接口*\/$/;"	m	struct:locker_t
dummpy_function	other/dummmy.c	/^void dummpy_function(void)$/;"	f
f1	other/struct_size.c	/^    char f1:3;$/;"	m	struct:st_with_bit2	file:
f1	other/struct_size.c	/^    char f1:3;$/;"	m	struct:st_with_bit3	file:
f1	other/struct_size.c	/^    int f1:3;$/;"	m	struct:st_with_bit	file:
f2	other/struct_size.c	/^    char f2:4;$/;"	m	struct:st_with_bit2	file:
f2	other/struct_size.c	/^    short f2:4;$/;"	m	struct:st_with_bit3	file:
f3	other/struct_size.c	/^    char f3:5;$/;"	m	struct:st_with_bit2	file:
f3	other/struct_size.c	/^    char f3:5;$/;"	m	struct:st_with_bit3	file:
g_unit_channel_map	other/point_arr.c	/^channel_info_t * g_unit_channel_map[4] = {NULL};$/;"	v
i	other/struct_size.c	/^    int i;$/;"	m	struct:S1	file:
id	other/point_arr.c	/^    unsigned int id;$/;"	m	struct:channel_info_s	file:
init	other/point_arr.c	/^void init()$/;"	f
int_cmp	sort/sort_comm.c	/^int int_cmp(void *a, void *b)$/;"	f
int_cmp_invert	sort/sort_comm.c	/^int int_cmp_invert(void *a, void *b)$/;"	f
link	data_struct/single_link_list/sll_node.h	/^    struct NODE *link;$/;"	m	struct:NODE	typeref:struct:NODE::NODE
lock	data_struct/double_link_list/locker.h	/^    ret_e (*lock)(locker_s *thiz);       \/**< 加锁函数接口*\/$/;"	m	struct:locker_t
locker_destory	data_struct/double_link_list/locker.c	/^static inline void locker_destory(locker_s *thiz)$/;"	f	file:
locker_lock	data_struct/double_link_list/locker.c	/^static inline ret_e locker_lock(locker_s *thiz)$/;"	f	file:
locker_pthread_lock	data_struct/double_link_list/locker_pthread.c	/^static ret_e locker_pthread_lock(locker_s *thiz)$/;"	f	file:
locker_s	data_struct/double_link_list/locker.h	/^}locker_s;$/;"	t	typeref:struct:locker_t
locker_t	data_struct/double_link_list/locker.h	/^typedef struct locker_t$/;"	s
locker_unlock	data_struct/double_link_list/locker.c	/^static inline ret_e locker_unlock(locker_s *thiz)$/;"	f	file:
main	data_struct/single_link_list/sll_test.c	/^int main()$/;"	f
main	other/dummmy.c	/^int main(void)$/;"	f
main	other/point_arr.c	/^int main()$/;"	f
main	other/pointpoint.c	/^int main()$/;"	f
main	other/struct_size.c	/^int main(void)$/;"	f
main	sort/test_sort.c	/^int main(int argc, char **argv)$/;"	f
main	wheres_my_data/bss.c	/^int main(int argc, char *argv[])$/;"	f
main	wheres_my_data/data.c	/^int main(int argc, char *argv[])$/;"	f
print_arr	sort/test_sort.c	/^void print_arr(void **array, size_t n)$/;"	f
priv	data_struct/double_link_list/locker.h	/^    char priv[0];                        \/**< 存放上下问信息，即具体实现用到的数据结构*\/$/;"	m	struct:locker_t
ret_e	common/typedef.h	/^}ret_e;$/;"	t	typeref:enum:ret_t
ret_t	common/typedef.h	/^typedef enum ret_t$/;"	g
return_if_fail	common/debug.h	15;"	d
return_val_if_fail	common/debug.h	19;"	d
s	other/struct_size.c	/^    struct S1 s;$/;"	m	struct:S3	typeref:struct:S3::S1	file:
s	other/struct_size.c	/^    struct s1 s;$/;"	m	struct:s3	typeref:struct:s3::s1	file:
s	other/struct_size.c	/^    struct s2 s;$/;"	m	struct:s4	typeref:struct:s4::s2	file:
s1	other/struct_size.c	/^struct s1{$/;"	s	file:
s2	other/struct_size.c	/^struct s2{$/;"	s	file:
s3	other/struct_size.c	/^struct s3{ \/\/整体空间是自结构体与父结构体中占用空间最大的成员（的类型）所占字节数的整数倍$/;"	s	file:
s4	other/struct_size.c	/^struct s4{$/;"	s	file:
select_sort	sort/sort.c	/^ret_e select_sort(void **array, size_t nr, DataCompareFunc cmp)$/;"	f
sll_insert	data_struct/single_link_list/sll_node.c	/^int sll_insert(Node *current, int new_value)$/;"	f
sort_test	sort/test_sort.c	/^void sort_test(SortFunc sort)$/;"	f
sort_test_asc	sort/test_sort.c	/^void sort_test_asc(SortFunc sort, int n)$/;"	f
sort_test_dsc	sort/test_sort.c	/^void sort_test_dsc(SortFunc sort, int n)$/;"	f
st_empty	other/struct_size.c	/^typedef struct st_empty{$/;"	s	file:
st_with_array	other/struct_size.c	/^typedef struct st_with_array{$/;"	s	file:
st_with_bit	other/struct_size.c	/^typedef struct st_with_bit{$/;"	s	file:
st_with_bit2	other/struct_size.c	/^typedef struct st_with_bit2{$/;"	s	file:
st_with_bit3	other/struct_size.c	/^typedef struct st_with_bit3{$/;"	s	file:
type	other/point_arr.c	/^    unsigned int type;$/;"	m	struct:channel_info_s	file:
unlock	data_struct/double_link_list/locker.h	/^    ret_e (*unlock)(locker_s *thiz);     \/**< 解锁函数接口*\/$/;"	m	struct:locker_t
value	data_struct/single_link_list/sll_node.h	/^    int value;$/;"	m	struct:NODE
