本文件中的例子用于说明C语言中的各种不同数据所存储位置的不同

未初始化的全局变量（BSS段,Block Started by Symbol)
存放：未初始化的全局变量和静态变量
例子：bss.c
gcc -g bss.c -o bss
使用ls -l bss 查看文件大小为8K
使用size bss查看bss段大小为4M
或者使用objdump -h  bss | grep bss 
查看，后续不再重复描述上述内容。
说明：上述说明BSS段只在运行时会占用空间

初始化过的全局变量（.data段）
存放：存放初始化的数据，若数据全为0，则为了优化，编译器会将其当成bss段处理，即存放非零的数据段
说明：data类型的全局变量既占用文件空间又占用内存空间

常量数据（.rodata段）
说明：ro为read only.内部存放常量数据
（1）常量不一定就放在rodata里，有的立即数直接和指令编码在一起，放在代码段(.txt)中。
（2）对于字符串常量，编译器会自动去掉重复的字符串，保证一个字符串在一个可执行文件（EXE/SO）只存在一个副本。
（3）rodata是在多线程之间共享的，这样可以提高运行空间利用率。
（4）在有的嵌入式系统中，rodata放在ROM(或者NOR闪存芯片)里，运行时直接读取，无需加载到RAM中。
(5)在嵌入式Linux系统中，也可以通过一种叫做XIP（就地执行)的技术直接读取常量数据，而无需加载到RAM中。
（6）常量是不能修改的，修改常量在Linux下会出现段错误。

代码（.text段）
存放：存放代码和部分整数常量，它与rodata段很相似，主要区别在于text段是可以执行的。


栈（stack)
存放：用来存放临时变量和函数参数

堆（heap)
说明：生命周期完全由使用者控制
（1）alloc和free配对使用
（2）分配多少用多少
将读写分配范围外的数据的情况称为缓冲区溢出（buffer overflow),使用Linux下的valgrind可以很方便的查找到这种错误。

